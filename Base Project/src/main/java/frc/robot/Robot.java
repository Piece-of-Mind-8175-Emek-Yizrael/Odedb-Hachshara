// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import static frc.robot.Constants.IntakeConstants.ARM_PORT;
import static frc.robot.Constants.IntakeConstants.FOLD_SPEED;
import static frc.robot.Constants.IntakeConstants.INTAKE_PORT;
import static frc.robot.Constants.IntakeConstants.INTAKE_SPEED;
import static frc.robot.Constants.IntakeConstants.LIMIT_SWITCH;
import static frc.robot.Constants.IntakeConstants.OUTAKE_SPEED;
import static frc.robot.Constants.ControllerConstants.*;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.*;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.math.controller.ArmFeedforward;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.event.EventLoop;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;
    public CANSparkMax intake = new CANSparkMax(INTAKE_PORT, MotorType.kBrushless);
    public Joystick controller = new Joystick(OPERATOR_PORT);
    public CANSparkMax arm = new CANSparkMax(ARM_PORT, MotorType.kBrushless);
    private RelativeEncoder arm_encoder = arm.getEncoder();
    public ArmFeedforward armFeedforward = new ArmFeedforward(0, 0.048, 0);
    private DigitalInput foldLimitSwitch = new DigitalInput(LIMIT_SWITCH);
    private boolean fold_flag = false;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
        // autonomous chooser on the dashboard.
        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        enableLiveWindowInTest(true);
    }

    /**
    * This function is called every robot packet, no matter the mode. Use this for items like
    * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
    *
    * <p>This runs after the mode specific periodic functions, but before
    * LiveWindow and SmartDashboard integrated updating.
    */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
        // commands, running already-scheduled commands, removing finished or interrupted commands,
        // and running subsystem periodic() methods.  This must be called from the robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();

        SmartDashboard.putNumber("arm encoder" ,arm_encoder.getPosition());
        SmartDashboard.putNumber("feed forward" ,resistGravity());
        SmartDashboard.putBoolean("flag" ,fold_flag);
        SmartDashboard.putBoolean("Limit Switch" ,!foldLimitSwitch.get());

        if(!foldLimitSwitch.get()){
            arm_encoder.setPosition(-0.323);
        }
    }


    /**
    * This function is called once each time the robot enters Disabled mode.
    */
    @Override
    public void disabledInit() {
    }

    @Override
    public void disabledPeriodic() {
    }

    /**
    * This autonomous runs the autonomous command selected by your {@link RobotContainer} class.
    */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }
    }

    /**
    * This function is called periodically during autonomous.
    */
    @Override
    public void autonomousPeriodic() {
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }
        arm_encoder.setPositionConversionFactor(1/50.0 * 16/42.0 * 2 * Math.PI);
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
        if(controller.getRawButtonPressed(A)){
            intake.set(INTAKE_SPEED);
        }
        else if(controller.getRawButtonPressed(B)){
            intake.set(OUTAKE_SPEED);
        }
        else if(controller.getRawButtonReleased(A) || controller.getRawButtonReleased(B)) {
            intake.set(0);
        }
        if(controller.getRawButtonPressed(X)){
            fold_flag = true;
        }
        if(!foldLimitSwitch.get()){
            fold_flag = false;
            arm_encoder.setPosition(-0.323);
        }
        if(fold_flag){
            arm.set(FOLD_SPEED + resistGravity());
        }
        else{
            arm.set(resistGravity());
        }


    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
    * This function is called periodically during test mode.
    */
    @Override
    public void testPeriodic() {
    }


    public double resistGravity(){
        return armFeedforward.calculate(arm_encoder.getPosition(),0);   
    }

}